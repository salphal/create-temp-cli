import React, { useState, useEffect, useRef } from 'react';
import classNames from 'classnames';
import { useShallow } from 'zustand/react/shallow';
import use${CompName}Store from './store';
import { ${CompName}ContextProvider } from './context';
import styles from './index.module.scss';

export interface ${CompName}Props {
  children?: any;
}

export interface ${CompName}Methods {
}

const ${CompName}: React.FC<${CompName}Props> = (props: ${CompName}Props & ${CompName}Methods) => {

  const {} = props;

  const { key } = use${CompName}Store(useShallow((state: any) => state));

  useEffect(() => {}, []);

  return (
    <React.Fragment>

      <${CompName}ContextProvider value={{}}>
        <div className={classNames([styles.${className}])}>
          {props.children}
          props: {JSON.stringify(props)}<br/>
        </div>
      <${CompName}ContextProvider />

    </React.Fragment>
  );
};

export default React.memo(${CompName});
